{% comment %}
  This section is used in the cart template to render /cart page with an
  overview of the items in customer's cart.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/cart
{% endcomment %}

<section class="cart-page w-full mx-auto px-4 py-6 lg:max-w-[70%]">
  <h1 class="text-2xl font-semibold mb-6">{{ 'cart.title' | t }}</h1>

  {% if cart.item_count == 0 %}
    <div class="text-center py-24">
      <p class="text-gray-600 mb-4">Your cart is empty.</p>
      <a href="/collections/all" class="inline-flex items-center justify-center bg-black text-white rounded-md h-11 px-6 hover:bg-gray-900">Continue shopping</a>
    </div>
  {% else %}
    <!-- Progressive enhancement: native form as fallback -->
    <form action="{{ routes.cart_url }}" method="post" class="hidden" aria-hidden="true">
      {% for item in cart.items %}
        <input type="hidden" name="updates[]" value="{{ item.quantity }}">
      {% endfor %}
      <button type="submit" name="checkout">{{ 'cart.checkout' | t }}</button>
    </form>

    <div id="cart-root" class="grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-6">
      <!-- Items -->
      <div>
        <div class="divide-y divide-gray-100 border border-gray-200 rounded-md bg-white">
          {% for item in cart.items %}
            <div class="flex gap-4 p-3 items-start" data-line="{{ forloop.index }}">
              <a href="{{ item.url }}" class="w-24 h-28 lg:w-32 lg:h-36 flex-shrink-0 rounded overflow-hidden bg-gray-100">
                {% if item.image %}
                  <img src="{{ item.image | image_url: width: 240 }}" alt="{{ item.product.title }}" class="w-full h-full object-cover" loading="lazy">
                {% endif %}
              </a>
              <div class="flex-1 min-w-0">
                <a href="{{ item.url }}" class="block text-sm font-medium text-gray-900 truncate">{{ item.product.title }}</a>
                {% if item.variant_title and item.variant_title != 'Default Title' %}
                  <div class="text-xs text-gray-500 mt-1">{{ item.variant_title }}</div>
                {% endif %}
                {% if item.selling_plan_allocation %}
                  <div class="text-xs text-gray-500 mt-1">{{ item.selling_plan_allocation.selling_plan.name }}</div>
                {% endif %}
                <div class="mt-2 text-sm text-gray-900">{{ item.line_price | money }}</div>
                <div class="mt-3 flex items-center gap-3">
                  <div class="flex items-center border border-gray-200 rounded">
                    <button type="button" class="px-2 py-1 text-gray-500 hover:text-gray-700" data-qty-minus aria-label="Decrease quantity">−</button>
                    <input class="w-14 text-center py-1 border-0 focus:ring-0 focus:outline-none" data-qty-input type="number" min="0" value="{{ item.quantity }}" />
                    <button type="button" class="px-2 py-1 text-gray-500 hover:text-gray-700" data-qty-plus aria-label="Increase quantity">＋</button>
                  </div>
                  <button type="button" class="text-sm text-gray-500 hover:text-red-500" data-remove>
                    {% render 'icon', icon: 'trash' %}
                  </button>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>

      <!-- Summary -->
      <aside class="border border-gray-200 rounded-md p-4 h-fit sticky top-24 bg-white">
        <div class="flex items-center justify-between text-sm mb-2">
          <span>Subtotal</span>
          <span id="cart-subtotal" class="font-medium">{{ cart.items_subtotal_price | money }}</span>
        </div>
        <p class="text-xs text-gray-500 mb-4">Shipping and taxes calculated at checkout.</p>
        <div class="space-y-2">
          <a href="/checkout" class="w-full inline-flex items-center justify-center bg-black text-white rounded-md h-11 hover:bg-gray-900">Checkout</a>
          <button type="button" id="cart-clear" class="w-full inline-flex items-center justify-center text-sm text-gray-500 hover:text-gray-700">Clear cart</button>
        </div>
      </aside>
    </div>
  {% endif %}
</section>

<script>
  // Cart page AJAX utilities
  (function() {
    const root = document.getElementById('cart-root');
    if (!root) return;

    const subtotalEl = document.getElementById('cart-subtotal');
    const clearBtn = document.getElementById('cart-clear');

    const formatMoney = (cents) => {
      try {
        return new Intl.NumberFormat('{{ shop.locale | default: 'en-US' }}', { style: 'currency', currency: '{{ shop.currency }}' }).format((cents||0)/100);
      } catch(e) { return (cents/100).toFixed(2); }
    };

    const fetchCart = () => fetch('{{ routes.cart_url }}.js').then(r => r.json());
    const changeLine = (line, quantity) => fetch('/cart/change.js', {
      method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({ line, quantity })
    }).then(r => r.json());
    const clearCart = () => fetch('/cart/clear.js', { method: 'POST' }).then(r => r.json());

    const renderCart = (cart) => {
      // Update subtotal
      if (subtotalEl) subtotalEl.textContent = formatMoney(cart.items_subtotal_price);
      // Update each line quantity and price
      [...root.querySelectorAll('[data-line]')].forEach((row, idx) => {
        const line = idx + 1;
        const item = cart.items[idx];
        if (!item) {
          row.remove();
          return;
        }
        // Keep data-line in sync with current ordering
        row.setAttribute('data-line', String(line));
        const qtyInput = row.querySelector('[data-qty-input]');
        const priceEl = row.querySelector('.mt-2.text-sm.text-gray-900');
        if (qtyInput) { qtyInput.value = item.quantity; qtyInput.setAttribute('data-prev', String(item.quantity)); }
        if (priceEl) priceEl.textContent = formatMoney(item.line_price);
      });

      // If cart is empty, reload page to show empty state
      if (!cart.items || cart.items.length === 0) {
        window.location.reload();
      }
    };

    root.addEventListener('click', (e) => {
      const control = e.target.closest('[data-qty-plus], [data-qty-minus], [data-remove]');
      if (!control) return;
      const row = control.closest('[data-line]');
      if (!row) return;
      const line = Number(row.getAttribute('data-line'));
      const title = row.querySelector('a.block')?.textContent?.trim() || 'Item';
      const plural = (n, s, p) => (n === 1 ? s : p);
      if (control.matches('[data-qty-plus]')) {
        const input = row.querySelector('[data-qty-input]');
        const current = parseInt(input.value||'0')||0;
        const next = Math.max(0, current + 1);
        const prom = changeLine(line, next).then((c)=>{ renderCart(c); input.setAttribute('data-prev', String(next)); return c; });
        window.Toast?.promise(prom, {
          loading: { title: `Updating ${title}…` },
          success: (c) => ({
            title: `Updated ${title}: ${current} → ${next}`,
            description: `Subtotal: ${formatMoney(c.total_price)} · ${c.item_count} ${plural(c.item_count,'item','items')}`
          }),
          error: (err) => ({ title: 'Failed to update quantity', description: err?.message || '' })
        });
      } else if (control.matches('[data-qty-minus]')) {
        const input = row.querySelector('[data-qty-input]');
        const current = parseInt(input.value||'0')||0;
        const next = Math.max(0, current - 1);
        const prom = changeLine(line, next).then((c)=>{ renderCart(c); input.setAttribute('data-prev', String(next)); return c; });
        window.Toast?.promise(prom, {
          loading: { title: `Updating ${title}…` },
          success: (c) => ({
            title: `Updated ${title}: ${current} → ${next}`,
            description: `Subtotal: ${formatMoney(c.total_price)} · ${c.item_count} ${plural(c.item_count,'item','items')}`
          }),
          error: (err) => ({ title: 'Failed to update quantity', description: err?.message || '' })
        });
      } else if (control.matches('[data-remove]')) {
        const input = row.querySelector('[data-qty-input]');
        const prev = parseInt(input?.getAttribute('data-prev')||input?.value||'0')||0;
        const prom = changeLine(line, 0).then((c)=>{ renderCart(c); return c; });
        window.Toast?.promise(prom, {
          loading: { title: `Removing ${title}…` },
          success: (c) => ({
            title: `Removed ${title} (x${prev})`,
            description: `Subtotal: ${formatMoney(c.total_price)} · ${c.item_count} ${plural(c.item_count,'item','items')}`
          }),
          error: (err) => ({ title: 'Failed to remove item', description: err?.message || '' })
        });
      }
    });

    root.addEventListener('change', (e) => {
      const input = e.target.closest('[data-qty-input]');
      if (!input) return;
      const row = e.target.closest('[data-line]');
      const line = Number(row.getAttribute('data-line'));
      const prev = parseInt(input.getAttribute('data-prev')||input.value||'0')||0;
      const qty = Math.max(0, parseInt(input.value||'0')||0);
      const title = row.querySelector('a.block')?.textContent?.trim() || 'Item';
      const prom = changeLine(line, qty).then((c)=>{ renderCart(c); input.setAttribute('data-prev', String(qty)); return c; });
      window.Toast?.promise(prom, {
        loading: { title: `Updating ${title}…` },
        success: (c) => ({
          title: `Updated ${title}: ${prev} → ${qty}`,
          description: `Subtotal: ${formatMoney(c.total_price)} · ${c.item_count} ${plural(c.item_count,'item','items')}`
        }),
        error: (err) => ({ title: 'Failed to update quantity', description: err?.message || '' })
      });
    });

    clearBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      const prom = clearCart().then(() => {
        setTimeout(()=> window.location.reload(), 400);
      });
      window.Toast?.promise(prom, {
        loading: { title: 'Clearing cart…' },
        success: { title: 'Cart cleared', description: 'Your cart is now empty.' },
        error: (err) => ({ title: 'Failed to clear cart', description: err?.message || '' })
      });
    });

    // Ensure freshest data on load
    fetchCart().then(renderCart).catch(() => {});
  })();
</script>

{% schema %}
{
  "name": "t:general.cart",
  "settings": []
}
{% endschema %}
