{% schema %}
{
"name": "Categories",
"tag": "section",
"settings": [
{
"type": "header",
"content": "Manage your categories here"
}, {
"type": "checkbox",
"id": "expand_on_hover",
"label": "Expand on hover"
}
],
"blocks": [
{
"type": "category",
"name": "Category",
"settings": [
{
"type": "image_picker",
"id": "category_image",
"label": "Category image"
}, {
"type": "text",
"id": "category_title",
"label": "Category title"
}, {
"type": "url",
"id": "category_link",
"label": "Category link"
}
]
}
],
"max_blocks": 10,
"presets": [
{
"name": "Categories",
"category": "Collections"
}
]
}
{% endschema %}

<section>
  <div id="categoryGrid"
    class="flex flex-overflow md:gap-0 gap-4 items-center md:grid transition-all duration-150 group overflow-auto scrollbar-hide p-4 md:p-0"
    style="grid-template-columns: repeat({{ section.blocks.size }}, 1fr)">
    {% for block in section.blocks %}
    <div>
      <a href="{{ block.settings.category_link | default: '/collections/all' }}"
        class="h-24 md:h-80 rounded-full md:rounded-none overflow-clip aspect-square md:aspect-auto relative grid-item cursor-pointer transition-all duration-150 grid place-items-center gap-4 group/card shrink-0 scrollbar-hide shadow-lg">
        <img class="h-24 md:h-80 object-contain w-full transition-all duration-150"
          src="{{ block.settings.category_image | image_url }}" alt="{{ block.settings.category_title }}">
        <h3
          class="absolute bottom-0 left-0 right-0 text-center text-white bg-gradient-to-b from-transparent to-black p-2 group-hover/card:pt-20 transition-all duration-150 hidden md:block">
          {{ block.settings.category_title }}</h3>
      </a>
      <div class="md:hidden text-center mt-2 text-xs font-medium">
        <h3>{{ block.settings.category_title }}</h3>
      </div>
    </div>
    {% endfor %}
  </div>
</section>

{% if section.settings.expand_on_hover %}
<script defer>
  const grid = document.getElementById('categoryGrid');
  const colCount = {{ section.blocks.size }};
  const defaultWidth = '1fr';
  const expandedWidth = '1.2fr';

  function expandColumn(index) {
    let columns = [];
    for (let i = 0; i < colCount; i++) {
      columns.push(i === index ? expandedWidth : defaultWidth);
    }
    grid.style.gridTemplateColumns = columns.join(' ');
    // Optional: highlight hovered item bg color
    grid.children[index].classList.add('bg-gray-50');
  }

  function resetColumns() {
    grid.style.gridTemplateColumns = Array.from({ length: colCount }, () => defaultWidth).join(' ');
    for (let child of grid.children) {
      child.classList.remove('bg-gray-50');
    }
  }

  grid.querySelectorAll('.grid-item').forEach((item, index) => {
    item.addEventListener('mouseover', () => expandColumn(index));
    item.addEventListener('mouseout', () => resetColumns());
  });
</script>
{% endif %}