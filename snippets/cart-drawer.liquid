{% comment %}
Reusable Cart Drawer
Includes overlay + right-side panel, basic cart summary, and controls.
Usage: place `{% render 'cart-drawer' %}` once (e.g., in `layout/theme.liquid` or header) and trigger with `[data-cart-open]`.
{% endcomment %}

<div id="cart-drawer" class="fixed inset-0 z-[60] pointer-events-none">
  <!-- Overlay -->
  <div data-cart-overlay class="hidden absolute inset-0 bg-black/40 opacity-0 transition-opacity duration-200"></div>

  <!-- Panel -->
  <aside data-cart-panel class="absolute right-0 top-0 h-full w-[90%] max-w-md bg-white shadow-xl translate-x-full transition-transform duration-300 flex flex-col">
    <div class="flex items-center justify-between p-4 border-b">
      <h3 class="text-lg font-semibold">Your Cart</h3>
      <button type="button" data-cart-close class="p-2 text-gray-500 hover:text-gray-800" aria-label="Close cart">
        {% render 'icon', icon: 'x' %}
      </button>
    </div>

    <!-- Cart content -->
    <div data-cart-content class="flex-1 overflow-auto p-4 space-y-4">
      <div class="text-sm text-gray-500">Loading your cart...</div>
    </div>

    <!-- Footer -->
    <div class="border-t p-4 space-y-3">
      <div class="flex items-center justify-between text-sm">
        <span>Subtotal</span>
        <span data-cart-subtotal class="font-medium">â€”</span>
      </div>
      <p class="text-xs text-gray-500">Shipping and taxes calculated at checkout.</p>
      <div class="flex gap-2">
        <a href="{{ routes.cart_url }}" class="flex-1 inline-flex items-center justify-center border border-gray-300 rounded-md h-10 text-gray-800 hover:bg-gray-50">View cart</a>
        <a href="/checkout" class="flex-1 inline-flex items-center justify-center bg-black text-white rounded-md h-10 hover:bg-gray-900">Checkout</a>
      </div>
    </div>
  </aside>
</div>

<script>
  (() => {
    const drawer = document.getElementById('cart-drawer');
    if (!drawer) return;

    const overlay = drawer.querySelector('[data-cart-overlay]');
    const panel = drawer.querySelector('[data-cart-panel]');
    const content = drawer.querySelector('[data-cart-content]');
    const subtotalEl = drawer.querySelector('[data-cart-subtotal]');

    const open = () => {
      drawer.style.pointerEvents = 'auto';
      overlay.classList.remove('hidden');
      requestAnimationFrame(() => {
        overlay.classList.remove('opacity-0');
        panel.classList.remove('translate-x-full');
        document.documentElement.classList.add('overflow-hidden');
      });
      // Fetch cart
      fetch('{{ routes.cart_url }}.js')
        .then(r => r.json())
        .then(cart => renderCart(cart))
        .catch(() => {
          content.innerHTML = '<div class="text-sm text-red-500">Failed to load cart.</div>';
        });
    };

    const close = () => {
      overlay.classList.add('opacity-0');
      panel.classList.add('translate-x-full');
      document.documentElement.classList.remove('overflow-hidden');
      setTimeout(() => {
        overlay.classList.add('hidden');
        drawer.style.pointerEvents = 'none';
      }, 300);
    };

    const formatMoney = (cents) => {
      try {
        return new Intl.NumberFormat('{{ shop.locale | default: 'en-US' }}', { style: 'currency', currency: '{{ shop.currency }}' }).format((cents || 0)/100);
      } catch(e) {
        return (cents/100).toFixed(2);
      }
    };

    const renderCart = (cart) => {
      subtotalEl.textContent = formatMoney(cart.items_subtotal_price);
      if (!cart.items || cart.items.length === 0) {
        content.innerHTML = '<div class="text-sm text-gray-500">Your cart is empty.</div>';
        return;
      }
      content.innerHTML = cart.items.map(item => `
        <div class="flex gap-3">
          <div class="w-16 h-16 bg-gray-100 flex-shrink-0 overflow-hidden rounded">
            ${item.image ? `<img src="${item.image}" alt="${item.product_title}" class="w-full h-full object-cover" />` : ''}
          </div>
          <div class="flex-1 min-w-0">
            <div class="text-sm font-medium text-gray-900 truncate">${item.product_title}</div>
            <div class="text-xs text-gray-500 truncate">${item.variant_title || ''}</div>
            <div class="mt-1 text-sm">${formatMoney(item.line_price)}</div>
            <div class="mt-2 flex items-center gap-2 text-xs text-gray-500">
              <span>Qty: ${item.quantity}</span>
            </div>
          </div>
        </div>
      `).join('');
    };

    // Global controls
    document.addEventListener('click', (e) => {
      const trigger = e.target.closest('[data-cart-open]');
      if (trigger) {
        e.preventDefault();
        open();
        return;
      }
      if (e.target.closest('[data-cart-close]') || e.target === overlay) {
        e.preventDefault();
        close();
      }
    });

    // Expose for other scripts if needed
    window.CartDrawer = { open, close };
  })();
</script>
