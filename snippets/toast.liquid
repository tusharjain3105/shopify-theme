<div id="toast-root" class="pointer-events-none fixed inset-x-0 top-4 z-[9999] flex justify-center lg:justify-end items-start gap-3 px-4" aria-live="polite" aria-atomic="true"></div>
<style>
  .toast-enter { transform: translateY(-12px); opacity: 0; }
  .toast-enter-active { transform: translateY(0); opacity: 1; transition: all .2s ease; }
  .toast-exit { transform: translateY(0); opacity: 1; }
  .toast-exit-active { transform: translateY(-12px); opacity: 0; transition: all .2s ease; }
  .toast-spinner { display: inline-block; width: 16px; height: 16px; min-width: 16px; min-height: 16px; flex: none; border-radius: 9999px; border: 2px solid currentColor; border-top-color: transparent; animation: toast-spin 0.8s linear infinite; }
  @keyframes toast-spin { to { transform: rotate(360deg); } }
</style>
<script>
(function(){
  const rootId = 'toast-root';
  const ensureRoot = () => {
    let r = document.getElementById(rootId);
    if (!r) {
      r = document.createElement('div');
      r.id = rootId;
      r.className = 'pointer-events-none fixed inset-x-0 top-4 z-[9999] flex justify-center lg:justify-end items-start gap-3 px-4';
      r.setAttribute('aria-live','polite');
      r.setAttribute('aria-atomic','true');
      document.body.appendChild(r);
    }
    return r;
  };

  const makeToastEl = (msg, type) => {
    const palette = {
      loading: 'bg-gray-50 text-gray-900 border border-gray-200',
      info: 'bg-blue-50 text-blue-900 border border-blue-200',
      error: 'bg-red-50 text-red-900 border border-red-200',
      warn: 'bg-amber-50 text-amber-900 border border-amber-200',
      success: 'bg-green-50 text-green-900 border border-green-200'
    };
    const colorClass = palette[type] || palette.info;
    const toParts = (m) => {
      if (m && typeof m === 'object') {
        const t = m.title != null ? m.title : '';
        const d = m.description != null ? m.description : '';
        return { title: String(t), description: String(d) };
      }
      return { title: String(m || ''), description: '' };
    };
    const { title, description } = toParts(msg);
    const icons = {
      loading: '<span class="toast-spinner"></span>',
      info: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 8h.01M11 12h1v5m8-5a8 8 0 11-16 0 8 8 0 0116 0z" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
      success: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5 13l4 4L19 7" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
      warn: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 9v4m0 4h.01M10.29 3.86l-8.48 14.7A2 2 0 003.52 22h16.96a2 2 0 001.71-3.45L13.71 3.86a2 2 0 00-3.42 0z" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
      error: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>'
    };
    const el = document.createElement('div');
    el.role = 'status';
    el.className = `pointer-events-auto ${colorClass} shadow-sm rounded-lg px-5 py-4 text-base flex items-center gap-3 max-w-[92vw] lg:max-w-[420px]`;
    el.innerHTML = `
      <span class="toast-icon flex-none" aria-hidden="true">${icons[type] || ''}</span>
      <span class="toast-msg flex-1">
        <span class="toast-title font-medium">${title}</span>
        ${description ? `<span class="toast-desc block text-[13px] leading-5 opacity-80">${description}</span>` : ''}
      </span>
      <button type="button" aria-label="Close" class="ml-2 opacity-60 hover:opacity-100">×</button>
    `;
    return el;
  };

  const show = (msg, opts={}) => {
    try {
      let { type='info', timeout=2200 } = opts;
      // support both 'warn' and 'warning'
      if (type === 'warning') type = 'warn';
      const root = ensureRoot();
      const el = makeToastEl(msg, type);
      const closeBtn = el.querySelector('button');
      let timer;
      const remove = () => {
        if (!el.parentNode) return;
        el.classList.remove('toast-enter-active');
        el.classList.add('toast-exit','toast-exit-active');
        setTimeout(()=> el.remove(), 180);
      };
      closeBtn.addEventListener('click', remove);
      el.classList.add('toast-enter');
      root.appendChild(el);
      // trigger enter
      requestAnimationFrame(()=>{
        el.classList.remove('toast-enter');
        el.classList.add('toast-enter-active');
      });
      if (timeout) timer = setTimeout(remove, timeout);
      return remove;
    } catch(e) { /* noop */ }
  };

  // Promise-based toast: shows loading, then success/error
  const promise = (prom, opts={}) => {
    const root = ensureRoot();
    const { loading='Working…', success='Done', error='Something went wrong', timeout=2000 } = opts;
    // Create loading toast
    const safeLoading = (function(){
      if (typeof loading === 'function') return 'Working…';
      if (typeof loading === 'object') return String(loading.title || 'Working…');
      return String(loading);
    })();
    const el = makeToastEl('', 'loading');
    const msgEl = el.querySelector('.toast-msg');
    // Only show spinner in the icon slot; keep message clean to avoid double spinner
    msgEl.innerHTML = `<span class="toast-title font-medium">${safeLoading}</span>`;
    const closeBtn = el.querySelector('button');
    const remove = () => {
      if (!el.parentNode) return;
      el.classList.remove('toast-enter-active');
      el.classList.add('toast-exit','toast-exit-active');
      setTimeout(()=> el.remove(), 180);
    };
    closeBtn.addEventListener('click', remove);
    el.classList.add('toast-enter');
    root.appendChild(el);
    requestAnimationFrame(()=>{
      el.classList.remove('toast-enter');
      el.classList.add('toast-enter-active');
    });

    const toParts = (m) => {
      if (m && typeof m === 'object') return { title: m.title || '', description: m.description || '' };
      return { title: String(m || ''), description: '' };
    };
    const finish = (type, textOrObj) => {
      // swap classes to new palette
      el.className = el.className.replace(/bg-[^\s]+\s+text-[^\s]+\s+border\s+border-[^\s]+/, '');
      const palette = {
        info: 'bg-blue-50 text-blue-900 border border-blue-200',
        error: 'bg-red-50 text-red-900 border border-red-200',
        warn: 'bg-amber-50 text-amber-900 border border-amber-200',
        success: 'bg-green-50 text-green-900 border border-green-200'
      };
      el.className = `pointer-events-auto ${palette[type]||palette.info} shadow-sm rounded-lg px-5 py-4 text-base flex items-center gap-3 max-w-[92vw] lg:max-w-[420px]`;
      // swap icon from spinner to appropriate type icon
      const iconEl = el.querySelector('.toast-icon');
      if (iconEl) {
        const icons = {
          info: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 8h.01M11 12h1v5m8-5a8 8 0 11-16 0 8 8 0 0116 0z" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
          success: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5 13l4 4L19 7" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
          warn: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 9v4m0 4h.01M10.29 3.86l-8.48 14.7A2 2 0 003.52 22h16.96a2 2 0 001.71-3.45L13.71 3.86a2 2 0 00-3.42 0z" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>',
          error: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>'
        };
        iconEl.innerHTML = icons[type] || '';
      }
      const { title, description } = toParts(textOrObj);
      msgEl.innerHTML = `<span class="toast-title font-medium">${title}</span>${description ? `<span class=\"toast-desc block text-[13px] leading-5 opacity-80\">${description}</span>` : ''}`;
      setTimeout(remove, timeout);
    };

    Promise.resolve(typeof prom === 'function' ? prom() : prom)
      .then((val)=> { finish('success', typeof success === 'function' ? success(val) : success); return val; })
      .catch((err)=> { finish('error', typeof error === 'function' ? error(err) : error); throw err; });

    return { dismiss: remove };
  };

  window.Toast = window.Toast || { show, promise };
})();
</script>
