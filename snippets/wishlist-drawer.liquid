{% comment %}
Reusable Wishlist Drawer
Shows locally stored wishlist items. Trigger with [data-wishlist-open] and include with {% render 'wishlist-drawer' %}.
{% endcomment %}

<div id="wishlist-drawer" class="fixed inset-0 z-[60] pointer-events-none">
  <!-- Overlay -->
  <div data-wishlist-overlay class="hidden absolute inset-0 bg-black/40 opacity-0 transition-opacity duration-200">
  </div>

  <!-- Panel -->
  <aside data-wishlist-panel
    class="absolute right-0 top-0 h-full w-[90%] max-w-md bg-white shadow-xl translate-x-full transition-transform duration-300 flex flex-col">
    <div class="flex items-center justify-between p-4 border-b">
      <h3 class="text-lg font-semibold">Your Wishlist</h3>
      <button type="button" data-wishlist-close class="p-2 text-gray-500 hover:text-gray-800"
        aria-label="Close wishlist">
        {% render 'icon'
        , icon: 'x' %}
      </button>
    </div>

    <!-- Wishlist content -->
    <div data-wishlist-content class="flex-1 overflow-auto p-4 space-y-4">
      <div class="text-sm text-gray-500">No wishlist items yet.</div>
    </div>

    <!-- Footer -->
    <div class="border-t p-4 text-xs text-gray-500" hidden>
      Items are saved on this device only.
    </div>
  </aside>
</div>

<script>
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    console.log('DOMContentLoaded for wishlist-drawer');
    // Skip if already initialized
    if (window.WishlistDrawer && window.WishlistDrawer.initialized) {
      console.log('WishlistDrawer already initialized');
      return;
    }

    console.log('Initializing WishlistDrawer...');

    // Variables that will be used by the methods
    let drawer, overlay, panel, content;
    // Get drawer elements
    drawer = document.getElementById('wishlist-drawer');
    if (!drawer) {
      console.warn('Wishlist drawer element not found');
      return;
    }

    overlay = drawer.querySelector('[data-wishlist-overlay]');
    panel = drawer.querySelector('[data-wishlist-panel]');
    content = drawer.querySelector('[data-wishlist-content]');

    if (!overlay || !panel || !content) {
      console.warn('One or more wishlist drawer elements not found');
      return;
    }

    const open = () => {
      console.log('Opening wishlist drawer');
      drawer.style.pointerEvents = 'auto';
      overlay.classList.remove('hidden');
      requestAnimationFrame(() => {
        overlay.classList.remove('opacity-0');
        panel.classList.remove('translate-x-full');
        document.documentElement.classList.add('overflow-hidden');
      });
      render();
    };

    const close = () => {
      console.log('Closing wishlist drawer');
      overlay.classList.add('opacity-0');
      panel.classList.add('translate-x-full');
      document.documentElement.classList.remove('overflow-hidden');
      setTimeout(() => {
        overlay.classList.add('hidden');
        drawer.style.pointerEvents = 'none';
      }, 300);
    };

    const getWishlist = () => {
      try {
        const items = JSON.parse(localStorage.getItem('wishlistItems') || '[]');
        return Array.isArray(items) ? items : [];
      } catch (e) {
        console.error('Error reading wishlist:', e);
        return [];
      }
    };

    const saveWishlist = (list) => {
      try {
        localStorage.setItem('wishlistItems', JSON.stringify(list));
        window.dispatchEvent(new CustomEvent('wishlist:updated'));
      } catch (e) {
        console.error('Error saving wishlist:', e);
      }
    };

    const formatMoney = (cents) => {
      try {
        return new Intl.NumberFormat('{{ shop.locale | default: "en-US" }}', {
          style: 'currency',
          currency: '{{ shop.currency | default: "USD" }}'
        }).format((cents || 0) / 100);
      } catch (e) {
        console.error('Error formatting money:', e);
        return ((cents || 0) / 100).toFixed(2);
      }
    };

    const removeFromWishlist = (id) => {
      try {
        const next = getWishlist().filter(it => String(it.id) !== String(id));
        saveWishlist(next);
        render();
        if (window.Toast && window.Toast.success) {
          window.Toast.success({ title: 'Removed from wishlist' });
        }
      } catch (e) {
        console.error('Error removing from wishlist:', e);
      }
    };

    const render = () => {
      try {
        const items = getWishlist();
        console.log('Rendering wishlist items:', items);

        if (!items || !items.length) {
          content.innerHTML = `
            <div class="flex flex-col items-center justify-center py-12 px-4 text-center">
              <svg class="w-16 h-16 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
              <h3 class="text-lg font-medium text-gray-900 mb-1">Your wishlist is empty</h3>
              <p class="text-sm text-gray-500 mb-6">Add items to your wishlist and they'll appear here</p>
              <button type="button" data-wishlist-close class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-black hover:opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black">
                Continue Shopping
              </button>
            </div>`;
          return;
        }

        content.innerHTML = items.map(item => {
          if (!item) return '';

          const productTitle = item.title || 'Product';

          let productUrl = item.url || '#';
          if (item.handle && !productUrl.includes('/products/')) {
            productUrl = `/products/${item.handle}`;
          }

          let priceDisplay = '';
          try {
            if (item.formatted_price) {
              priceDisplay = item.formatted_price;
            } else if (item.price) {
              const priceValue = typeof item.price === 'string' ?
                parseFloat(item.price.replace(/[^0-9.]/g, '')) :
                parseFloat(item.price);
              if (!isNaN(priceValue)) {
                priceDisplay = formatMoney(priceValue * 100);
              }
            }
          } catch (e) {
            console.error('Error formatting price:', e);
          }

          let imageHtml = '';
          if (item.image) {
            let imageUrl = item.image;
            if (!imageUrl.startsWith('http') && !imageUrl.startsWith('//') && !imageUrl.startsWith('/')) {
              imageUrl = `/${imageUrl}`;
            }
            imageHtml = `
              <div class="w-20 h-20 flex-shrink-0 overflow-hidden rounded bg-gray-100">
                <img src="${imageUrl}" 
                     alt="${productTitle.replace(/"/g, '&quot;')}" 
                     class="w-full h-full object-cover" 
                     loading="lazy"
                     onerror="this.parentElement.innerHTML='<div class=\'w-full h-full flex items-center justify-center bg-gray-100\'><svg class=\'w-6 h-6 text-gray-400\' fill=\'none\' stroke=\'currentColor\' viewBox=\'0 0 24 24\'><path stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\' /></svg></div>'">
              </div>`;
          } else {
            imageHtml = `
              <div class="w-20 h-20 flex-shrink-0 flex items-center justify-center bg-gray-100 rounded">
                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>`;
          }

          return `
          <div class="flex gap-3 py-3 border-b last:border-b-0" data-product-id="${item.id}">
            <div class="w-20 h-20 bg-gray-100 flex-shrink-0 overflow-hidden rounded">
              <a href="${productUrl}" class="block w-full h-full">
                ${imageHtml}
              </a>
            </div>
            <div class="flex-1 min-w-0">
              <a href="${productUrl}" class="text-sm font-medium text-gray-900 hover:underline block truncate" title="${productTitle}">
                ${productTitle}
              </a>
              ${priceDisplay ? `<div class="mt-1 text-sm text-gray-700">${formatMoney(priceDisplay)}</div>` : ''}
              <div class="mt-2 flex items-center gap-2">
                <a href="${productUrl}" class="inline-flex items-center justify-center border border-gray-300 rounded-md h-8 px-3 text-sm text-gray-800 hover:bg-gray-50 whitespace-nowrap">
                  View product
                </a>
                <button type="button" data-wishlist-remove="${item.id}" class="inline-flex items-center gap-1 text-sm text-red-600 hover:text-red-700 whitespace-nowrap">
                  {% render 'icon', icon: 'trash', class: 'w-4 h-4' %}
                  Remove
                </button>
              </div>
            </div>
          </div>
        `;
        }).join('');
      } catch (e) {
        console.error('Error rendering wishlist:', e);
        content.innerHTML = '<div class="text-sm text-red-600">Error loading wishlist. Please refresh the page.</div>';
      }
    };

    // Initialize event listeners
    const initEventListeners = () => {
      document.addEventListener('click', (e) => {
        const openTrigger = e.target.closest('[data-wishlist-open]');
        if (openTrigger) {
          e.preventDefault();
          e.stopPropagation();
          open();
          return;
        }

        if (e.target.closest('[data-wishlist-close]') || e.target === overlay) {
          e.preventDefault();
          e.stopPropagation();
          close();
          return;
        }

        const removeBtn = e.target.closest('[data-wishlist-remove]');
        if (removeBtn) {
          e.preventDefault();
          e.stopPropagation();
          const id = removeBtn.getAttribute('data-wishlist-remove');
          removeFromWishlist(id);
          return;
        }
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !panel.classList.contains('translate-x-full')) {
          close();
        }
      });

      window.addEventListener('wishlist:updated', render);
    };

    // Initialize
    initEventListeners();

    // Initial render
    render();

    // Expose API globally
    window.WishlistDrawer = {
      initialized: true,
      open: open,
      close: close,
      render: render,
      getCount: () => getWishlist().length
    };

    console.log('WishlistDrawer initialized successfully', window.WishlistDrawer);

    // Dispatch event that wishlist is ready
    document.dispatchEvent(new CustomEvent('wishlist:ready'));
  });
</script>